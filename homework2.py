# BFS

# DFS
# graph including all the cities and their path values
graph = {
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Zerind': {'Oradea': 71, 'Arad': 75},
    'Arad': {'Zerind': 75, 'Sibiu': 140, 'Timisoara': 118},
    'Timisoara': {'Arad': 118, 'Lugoj': 111},
    'Lugoj': {'Timisoara': 111, 'Mehadia': 70},
    'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
    'Drobeta': {'Mehadia': 75, 'Craiova': 120},
    'Sibiu': {'Oradea': 151, 'Arad': 140, 'Fagaras': 99, 'Rimnicu Vilcea': 80},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Rimnicu Vilcea': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
    'Pitesti': {'Rimnicu Vilcea': 97, 'Craiova': 138, 'Bucharest': 101},
    'Craiova': {'Drobeta': 120, 'Rimnicu Vilcea': 146, 'Pitesti': 138},
    'Bucharest': {'Fagaras': 211, 'Pitesti': 101, 'Urziceni': 85, 'Giurgiu': 90},
    'Urziceni': {'Bucharest': 85, 'Vaslui': 142, 'Hirsova': 98},
    'Giurgiu': {'Bucharest': 90},
    'Hirsova': {'Urziceni': 98, 'Eforie': 86},
    'Eforie': {'Hirsova': 86},
    'Vaslui': {'Urziceni': 142, 'Iasi': 92},
    'Iasi': {'Vaslui': 92, 'Neamt': 87},
    'Neamt': {'Iasi': 87}
}

# dfs function
def dfs(graph, current_city, goal_city, visited=None, path=None):
    if visited is None:
        visited = set()
    if path is None:
        path = []

    visited.add(current_city)
    path = path + [current_city]

    if current_city == goal_city:
        # Calculate path cost
        path_cost = sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1))
        return path, path_cost

    for neighbor, _ in sorted(graph[current_city].items(), key=lambda x: x[1]):
        if neighbor not in visited:
            new_path, path_cost = dfs(graph, neighbor, goal_city, visited, path)
            if new_path:
                return new_path, path_cost

    return [], 0  # No path, cost is 0


# Printing the paths for each of the start cities to Bucharest
start_city_dfs = 'Timisoara'
goal_city_dfs = 'Bucharest'
path_dfs, cost_dfs = dfs(graph, start_city_dfs, goal_city_dfs)
print(f"DFS Path from {start_city_dfs} to {goal_city_dfs}: {path_dfs}, Cost: {cost_dfs}")

start_city_dfs = 'Oradea'
goal_city_dfs = 'Bucharest'
path_dfs, cost_dfs = dfs(graph, start_city_dfs, goal_city_dfs)
print(f"DFS Path from {start_city_dfs} to {goal_city_dfs}: {path_dfs}, Cost: {cost_dfs}")

start_city_dfs = 'Neamt'
goal_city_dfs = 'Bucharest'
path_dfs, cost_dfs = dfs(graph, start_city_dfs, goal_city_dfs)
print(f"DFS Path from {start_city_dfs} to {goal_city_dfs}: {path_dfs}, Cost: {cost_dfs}")

# A* Search

# Paths generated by each algorithm (testing)
#DFS Paths 
DFS Path from Timisoara to Bucharest: ['Timisoara', 'Lugoj', 'Mehadia', 'Drobeta', 'Craiova', 'Pitesti', 'Rimnicu Vilcea', 'Sibiu', 'Fagaras', 'Bucharest']
DFS Path from Oradea to Bucharest: ['Oradea', 'Zerind', 'Arad', 'Timisoara', 'Lugoj', 'Mehadia', 'Drobeta', 'Craiova', 'Pitesti', 'Rimnicu Vilcea', 'Sibiu', 'Fagaras', 'Bucharest']
DFS Path from Neamt to Bucharest: ['Neamt', 'Iasi', 'Vaslui', 'Urziceni', 'Bucharest']

# Correctness Discussion for each algorithm
# For DFS the algorithm does work correctly and will actively return an empty list if no such path exists between the start and end goal city however for the longer paths with more options it is not as effective. 
# It does find the shortest path for Neamt especially because there are not too many options for what path the algorithm could look into taking. 
# It found the shortest path when going from Timisoara to Bucharest. 
# It did not find the least costy/shortest path when going from Oreda to Bucharest. It shows the smallest value for each pair of values but overall led it to still being a longer path. 

# Efficiency Discussion for each algorithm
